-175. Combining two tables
SELECT a.firstName, a.lastName, b.city, b.state 
FROM Person AS a LEFT JOIN Address AS b ON a.personId = b.personId

-181. Employees Earning More Than Their Managers
SELECT Employee
FROM (SELECT a.name AS Employee, a.salary AS Employee_salary, b.salary AS manager_salary FROM Employee AS a JOIN Employee as b ON a.managerId = b.id)
AS sub WHERE Employee_salary > manager_salary
#USING SELF JOIN AND SUBQUERY. 
#CAUTION: Have to have alias in SELF JOIN, SUBQUERY


-182. Duplicate Emails
SELECT Email FROM(SELECT email, COUNT(*) AS COUNTING FROM Person GROUP BY email) AS sub WHERE COUNTING > 1 #my answer
SELECT Email FROM Person GROUP BY Email Having COUNT(*) > 1 #Other one


-183. Customers Who Never Order
SELECT name AS Customers FROM (SELECT a.id, a.name, b.customerId FROM Customers as a LEFT JOIN Orders AS b ON a.id = b.customerId WHERE b.customerId IS NULL) AS sub #my answer
select Name as Customers from Customers where Id not in (select CustomerId from Orders) #Other one. USING not in


-196. Delete Duplicate Emails(USING DELETE statement)
DELETE FROM PERSON WHERE ID NOT IN (SELECT MIN(ID) FROM PERSON GROUP BY EMAIL) #SQL Ver.
Person.drop(Person[Person.duplicated('email', keep='first')].index, inplace=True) #Pandas Ver.


-197. Rising Temperature
SELECT ID FROM (SELECT ID, TEMPERATURE, LAG(TEMPERATURE)  OVER (ORDER BY ID) AS PREV_TEMPERATURE FROM WEATHER) AS SUB #SQL Ver.
WHERE TEMPERATURE > PREV_TEMPERATURE #If there is not alias, will be error

def rising_temperature(weather: pd.DataFrame) -> pd.DataFrame: #Pandas Ver.
    copy_shift = weather.shift()
    weather['match'] = weather.temperature > copy_shift.temperature
    return weather.loc[weather['match'] == True, ['id']] # without [ ] at ['id'], return class series.


-511. Game Play Analysis I
SELECT PLAYER_ID, MIN(EVENT_DATE) AS FIRST_LOGIN FROM ACTIVITY GROUP BY PLAYER_ID #SQL Ver.

a = activity.groupby('player_id', as_index=False)['event_date'].min() #Pandas Ver. / Using 'groupby' function is point. parameter 'as_index' makes return type to DataFrame 
     a.rename(columns = {'event_date': 'first_login'}, inplace = True)
     return a 

577. Employee Bonus
SELECT E.NAME, B.BONUS FROM EMPLOYEE AS E  #SQL Ver.
LEFT JOIN BONUS AS B ON E.EMPID = B.EMPID
WHERE B.BONUS < 1000 OR B.BONUS IS NULL 

m = pd.merge(left = employee, right = bonus, how= 'left', on = 'empId') #Pandas Ver.
    return m[(m['bonus']<2000)|(m['bonus'].isna())][['name','bonus']]
