-175. Combining two tables
SELECT a.firstName, a.lastName, b.city, b.state 
FROM Person AS a LEFT JOIN Address AS b ON a.personId = b.personId

-181. Employees Earning More Than Their Managers
SELECT Employee
FROM (SELECT a.name AS Employee, a.salary AS Employee_salary, b.salary AS manager_salary FROM Employee AS a JOIN Employee as b ON a.managerId = b.id)
AS sub WHERE Employee_salary > manager_salary
#USING SELF JOIN AND SUBQUERY. 
#CAUTION: Have to have alias in SELF JOIN, SUBQUERY


-182. Duplicate Emails
SELECT Email FROM(SELECT email, COUNT(*) AS COUNTING FROM Person GROUP BY email) AS sub WHERE COUNTING > 1 #my answer
SELECT Email FROM Person GROUP BY Email Having COUNT(*) > 1 #Other one


-183. Customers Who Never Order
SELECT name AS Customers FROM (SELECT a.id, a.name, b.customerId FROM Customers as a LEFT JOIN Orders AS b ON a.id = b.customerId WHERE b.customerId IS NULL) AS sub #my answer
select Name as Customers from Customers where Id not in (select CustomerId from Orders) #Other one. USING not in


-196. Delete Duplicate Emails(USING DELETE statement)
DELETE FROM PERSON WHERE ID NOT IN (SELECT MIN(ID) FROM PERSON GROUP BY EMAIL) #SQL Ver.
Person.drop(Person[Person.duplicated('email', keep='first')].index, inplace=True) #Pandas Ver.


-197. Rising Temperature
SELECT ID FROM (SELECT ID, TEMPERATURE, LAG(TEMPERATURE)  OVER (ORDER BY ID) AS PREV_TEMPERATURE FROM WEATHER) AS SUB #SQL Ver.
WHERE TEMPERATURE > PREV_TEMPERATURE #If there is not alias, will be error

def rising_temperature(weather: pd.DataFrame) -> pd.DataFrame: #Pandas Ver.
    copy_shift = weather.shift()
    weather['match'] = weather.temperature > copy_shift.temperature
    return weather.loc[weather['match'] == True, ['id']] # without [ ] at ['id'], return class series.


-511. Game Play Analysis I
SELECT PLAYER_ID, MIN(EVENT_DATE) AS FIRST_LOGIN FROM ACTIVITY GROUP BY PLAYER_ID #SQL Ver.

a = activity.groupby('player_id', as_index=False)['event_date'].min() #Pandas Ver. / Using 'groupby' function is point. parameter 'as_index' makes return type to DataFrame 
     a.rename(columns = {'event_date': 'first_login'}, inplace = True)
     return a 

-577. Employee Bonus
SELECT E.NAME, B.BONUS FROM EMPLOYEE AS E  #SQL Ver.
LEFT JOIN BONUS AS B ON E.EMPID = B.EMPID
WHERE B.BONUS < 1000 OR B.BONUS IS NULL 

m = pd.merge(left = employee, right = bonus, how= 'left', on = 'empId') #Pandas Ver.
    return m[(m['bonus']<2000)|(m['bonus'].isna())][['name','bonus']]

-584. Find Customer Referee
SELECT name FROM CUSTOMER WHERE REFEREE_ID != 2 OR REFEREE_ID IS NULL #SQL Ver.

return customer[(customer['referee_id']!= 2)|(customer['referee_id'].isna())][['name']] #Pandas Ver.

-586. Customer Placing the Largest Number of Orders
SELECT CUSTOMER_NUMBER FROM ORDERS GROUP BY CUSTOMER_NUMBER #SQL Ver.
HAVING COUNT(*) = (SELECT MAX(SUB) 
FROM (SELECT COUNT(*) AS SUB FROM ORDERS GROUP BY CUSTOMER_NUMBER) AS A) # Can't use alias in Having sentence. so use COUNT(*) again.

a=orders.groupby('customer_number', as_index=False).count()
     return  a.loc[a['order_number']==a['order_number'].max(), ['customer_number']] #Pandas Ver.

-595. Big Countries
SELECT name, population, area FROM WORLD WHERE AREA >= 3000000 OR POPULATION >= 25000000 #SQL Ver.

return world.loc[(world['area']>=3000000)|(world['population']>25000000), ['name', 'population', 'area']] #Pandas Ver.
                                                                                                          #Include parentheses

-596. Classes With at Least 5 Students
SELECT CLASS FROM COURSES GROUP BY CLASS HAVING COUNT(*)>=5 #SQL Ver.

grouped = courses.groupby(['class'], as_index=False).count() #Pandas Ver.
                                                             #Using count()
    return grouped.loc[grouped['student']>=5, ['class']]

-607. Sales Person
WITH CTE(COM_ID, SALES_ID, COM_NAME) AS            #SQL Ver.
(
    SELECT O.COM_ID, O.SALES_ID, C.NAME FROM COMPANY AS C 
    INNER JOIN ORDERS AS O ON C.COM_ID = O.COM_ID WHERE O.COM_ID = 1
)

SELECT NAME FROM SALESPERSON WHERE SALES_ID NOT IN (SELECT SALES_ID FROM CTE)

 j=pd.merge(company, orders, "inner", 'com_id')    #Pandas Ver.
     j=j.loc[j['com_id']==1, ['com_id', 'sales_id']]
     J=pd.merge(sales_person, j, "left", 'sales_id')
     return J.loc[J['com_id'].isna(), ['name']]


-610. Triangle Judgement (7/27)
SELECT  *,     #SQL Ver.
CASE WHEN X+Y > Z AND X+Z > Y AND Y+Z > X THEN 'Yes'
		ELSE 'No'
	END AS 'TRIANGLE'
FROM TRIANGLE    #Using Case method

a=triangle    #Pandas Ver.
    cond = (a['x']+a['y']>a['z'])&(a['x']+a['z']>a['y'])&(a['y']+a['z']>a['x'])
    for i in range(0,2):
        if cond[i]:
            a.loc[i, 'triangle']='Yes'  
        else:
            a.loc[i, 'triangle']='No'
    return a

-619. Biggest Single Number (7/28)
SELECT TOP 1 NUM FROM(		#SQL Ver.
SELECT NUM FROM MYNUMBERS GROUP BY NUM HAVING COUNT(*)=1) AS SINGLE  
ORDER BY NUM DESC

max_unique = my_numbers.drop_duplicates(keep=False)['num'].max()	#Pandas Ver.
    if pd.isna(max_unique):
        result=pd.DataFrame({'num':[np.nan]})
    else:
        result=my_numbers.loc[my_numbers['num']==max_unique, ['num']]
        if result.empty:
            result = pd.DataFrame({'num':[np.nan]})
    return result

-620. Not Boring Movies (7/28)
SELECT * FROM CINEMA WHERE ID IN (1, 3, 5) AND DESCRIPTION != 'BORING' ORDER BY RATING DESC	#SQL Ver.

a=cinema.loc[(((cinema['id'] == 1)| (cinema['id'] == 3) | (cinema['id'] == 5)) & (cinema['description'] != 'boring')), ['id', 'movie', 'description', 'rating']]
    return a.sort_values(by = 'rating', ascending=False, inplace = False)	#Pandas Ver.
